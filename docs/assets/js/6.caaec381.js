(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{243:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"_30-天精通-rxjs-28-：scheduler-基本观念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-天精通-rxjs-28-：scheduler-基本观念","aria-hidden":"true"}},[t._v("#")]),t._v(" 30 天精通 RxJS(28)：Scheduler 基本观念")]),s("p",[t._v("不晓得读者们还记不记得，我们在前面的文章中有提到 Scheduler 是为了解决 RxJS 衍生的最后一个问题，而我们现在就在揭晓这个谜底。")]),s("p",[t._v("其实 RxJS 用久了之后就会发现 Observable 有一个优势是可以同时处理同步和非同步行为，但这个优势也带来了一个问题，就是我们常常会搞不清处现在的 observable 执行方式是同步的还是非同步的。换句话说，我们很容易搞不清楚 observable 到底什么时候开始发送元素！")]),s("p",[t._v("举例来说，我们可能很清楚 "),s("code",[t._v("interval")]),t._v(" 是非同步送出元素的，但 "),s("code",[t._v("range")]),t._v(" 呢？ "),s("code",[t._v("from")]),t._v(" 呢？他们可能有时候是非同步有时候是同步，这就会变得有点困扰，尤其在除错时执行顺序就非常重要。")]),s("p",[t._v("而 Scheduler 基本上就是拿来处理这个问题的！\n")]),s("h2",{attrs:{id:"什么是-scheduler？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-scheduler？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是 Scheduler？")]),s("p",[t._v("Scheduler 控制一个 observable 的订阅什么时候开始，以及发送元素什么时候送达，主要由以下三个元素所组成")]),s("ul",[s("li",[t._v("Scheduler 是一个资料结构。 它知道如何根据优先级或其他标准来储存并伫列任务。")]),s("li",[t._v("Scheduler 是一个执行环境。 它意味着任务何时何地被执行，比如像是 立即执行、在回呼(callback)中执行、setTimeout 中执行、animation frame 中执行")]),s("li",[t._v("Scheduler 是一个虚拟时钟。 它透过 "),s("code",[t._v("now()")]),t._v(" 这个方法提供了时间的概念，我们可以让任务在特定的时间点被执行。")])]),s("p",[t._v("简言之 Scheduler 会影响 Observable 开始执行及元素送达的时机，比如下面这个例子")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" observable "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rx"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Observable"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("create")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("observer"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    observer"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("next")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    observer"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("next")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    observer"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("next")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    observer"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("complete")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'before subscribe'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobservable"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("observeOn")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rx"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Scheduler"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("async")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 设为 async")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("subscribe")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    next"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    error"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'Error: '")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" err"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    complete"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'complete'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'after subscribe'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v('// "before subscribe"')]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v('// "after subscribe"')]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v('// "complete"')]),t._v("\n\n")])]),s("p",[s("a",{attrs:{href:"https://jsbin.com/sunekab/2/edit?js,console",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSBin")])]),s("p",[t._v("上面这段代码原本是同步执行的，但我们用了 "),s("code",[t._v("observable.observeOn(Rx.Scheduler.async)")]),t._v(" 原本是同步执行的就变成了非同步执行了。")]),s("h2",{attrs:{id:"有哪些-scheduler-可以用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有哪些-scheduler-可以用","aria-hidden":"true"}},[t._v("#")]),t._v(" 有哪些 Scheduler 可以用")]),s("p",[t._v("目前 RxJS 5 Scheduler 跟 RxJS 4.x 以前的版本完全不同，在 RxJS 5 当中有提供四个 scheduler，预设为 undefined 会直接以递回的方式执行")]),s("ul",[s("li",[t._v("queue 队列")]),s("li",[t._v("asap 尽快")]),s("li",[t._v("async 异步")]),s("li",[t._v("animationFrame 帧动画")])]),s("p",[t._v("这四个 scheduler 我们会在下面搭配代码一一讲解")]),s("blockquote",[s("p",[t._v("RxJS 5 跟 RxJS 4.x 预设的 Scheduler 不同，所以在某些使用情境下会出现不同的结果，例如"),s("a",{attrs:{href:"https://github.com/ReactiveX/rxjs/issues/1994",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个")]),t._v(" issue，请特别注意。")])]),s("h2",{attrs:{id:"使用-scheduler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-scheduler","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用 Scheduler")]),s("p",[t._v("其实我们在使用各种不同的 operator 时，这些 operator 就会各自预设不同的 scheduler，例如一个无限的 observable 就会预设为 "),s("code",[t._v("queue")]),t._v(" scheduler，而 timer 相关的 operator 则预设为 "),s("code",[t._v("async")]),t._v(" scheduler。")]),s("p",[t._v("要使用 Scheduler 除了前面用到的 "),s("code",[t._v("observeOn()")]),t._v(" 方法外，以下这几个 creation operators 最后一个参数都能接收 Scheduler")]),s("ul",[s("li",[t._v("bindCallback")]),s("li",[t._v("bindNodeCallback")]),s("li",[t._v("combineLatest")]),s("li",[t._v("concat")]),s("li",[t._v("empty")]),s("li",[t._v("from")]),s("li",[t._v("fromPromise")]),s("li",[t._v("interval")]),s("li",[t._v("merge")]),s("li",[t._v("of")]),s("li",[t._v("range")]),s("li",[t._v("throw")]),s("li",[t._v("timer")])]),s("p",[t._v("例如下面这个例子")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" observable "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rx"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Observable"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("from")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rx"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Scheduler"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("async")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),s("p",[t._v("另外还有多个 operators 最后一个参数可以传入 Scheduler 这边就不一一列出，这已参考官方的"),s("a",{attrs:{href:"http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("文件")]),t._v("，最通用的方式还是 "),s("code",[t._v("observeOn()")]),t._v(" 只要是 observable 就可以用这个方法。")]),s("h3",{attrs:{id:"queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#queue","aria-hidden":"true"}},[t._v("#")]),t._v(" queue")]),s("p",[t._v("queue 的运作方式跟预设的立即执行很像，但是当我们使用到递回的方法时，他会伫列这些行为而非直接执行，一个递回的 operator 就是他会执行另一个 operator，最好的例子就是 "),s("code",[t._v("repeat()")]),t._v("，如果我们不给他参数的话，他会执行无限多次，像下面这个例子")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Rx"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Observable"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("of")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("10")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("repeat")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("take")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("subscribe")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),s("p",[t._v("这个例子在 RxJS 4.x 的版本中执行会使浏览器挂掉，因为 "),s("code",[t._v("take(1)")]),t._v(" 永远不会被执行到 "),s("code",[t._v("repeat")]),t._v(" 会一直重复要元素，而在 RxJS 5 中他预设了无限的 observable 为 queue 所以他会把 repeat 的 next 行为先伫列起来，因为前一个 complete 还在执行中，而这时 repeat 就会回传一个可退订的物件给 "),s("code",[t._v("take(1)")]),t._v(" 等到 repeat 的 next 被第一次执行时就会结束，因为 "),s("code",[t._v("take(1)")]),t._v(" 会直接收到值。")]),s("p",[s("strong",[t._v("使用情境：")])]),s("p",[t._v("queue 很适合用在会有递回的 operator 且具有大量资料时使用，在这个情况下 queue 能避免不必要的效能损耗。")]),s("h3",{attrs:{id:"asap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#asap","aria-hidden":"true"}},[t._v("#")]),t._v(" asap")]),s("p",[t._v("asap 的行为很好理解，它是非同步的执行，在浏览器其实就是 setTimeout 设为 0 秒 (在 NodeJS 中是用 process.nextTick)，因为行为很好理解这里就不写例子了。")]),s("p",[s("strong",[t._v("使用情境：")])]),s("p",[t._v("asap 因为都是在 setTimeout 中执行，所以不会有 block event loop 的问题，很适合用在永远不会退订的 observable，例如在背景下持续监听 server 送来的通知。")]),s("h3",{attrs:{id:"async"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async","aria-hidden":"true"}},[t._v("#")]),t._v(" async")]),s("p",[t._v("这个是在 RxJS 5 中新出现的 Scheduler，它跟 asap 很像但是使用 setInterval 来运作，通常是跟时间相关的 operator 才会用到。")]),s("h3",{attrs:{id:"animationframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#animationframe","aria-hidden":"true"}},[t._v("#")]),t._v(" animationFrame")]),s("p",[t._v("这个相信大家应该都知道，他是利用 "),s("code",[t._v("Window.requestAnimationFrame")]),t._v(" 这个 API 去实现的，所以执行周期就跟 "),s("code",[t._v("Window.requestAnimationFrame")]),t._v(" 一模一样。")]),s("p",[s("strong",[t._v("使用情境：")])]),s("p",[t._v("在做复杂运算，且高频率触发的 UI 动画时，就很适合使用 animationFrame，以可以搭配 throttle operator 使用。")]),s("h2",{attrs:{id:"今日小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#今日小结","aria-hidden":"true"}},[t._v("#")]),t._v(" 今日小结")]),s("p",[t._v("这篇文章简单的介绍了 RxJS 的 Scheduler，因为篇幅的关系没有办法很细的去讲，但实际上 Scheduler 的使用非常简单，只要在 operator 的最后一个参数加上去或是用 observeOn 就可以了。平常其实不太需要用到 Scheduler，尤其在 RxJS 5 中已经有针对各种情况给不同的预设，笔者最常用到的还是 animationFrame！")]),s("p",[t._v("不知道今天读者们有没有收获呢？ 如果有任何疑问，欢迎在下方留言给我，谢谢。")])])}],!1,null,null,null);a.default=e.exports}}]);