(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{217:function(t,a,s){"use strict";s.r(a);var n=s(1),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"_30-天精通-rxjs-02-：-functional-programming-基本观念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-天精通-rxjs-02-：-functional-programming-基本观念","aria-hidden":"true"}},[t._v("#")]),t._v(" 30 天精通 RxJS (02)： Functional Programming 基本观念")]),s("blockquote",[s("p",[t._v("Functional Programming 是 Rx 最重要的观念之一，基本上只要学会 FP 要上手 Rx 就不难了！Functional Programming 可以说是近年来的显学，各种新的函数编程语言推出之外，其他旧有的语言也都在新版中加强对 FP 的支援！")])]),s("p",[t._v("这是【30天精通 RxJS】的 02 篇，如果还没看过 01 篇可以往这边走：\n"),s("a",{attrs:{href:"https://github.com/ShaofeiZi/30-days-proficient-in-rxjs/blob/master/30%20%E5%A4%A9%E7%B2%BE%E9%80%9A%20RxJS%20(01)%EF%BC%9A%E8%AE%A4%E8%AF%86%20RxJS.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("30 天精通 RxJS (01)： 认识 RxJS")])]),s("h2",{attrs:{id:"什么是-functional-programming"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-functional-programming","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是 Functional Programming ?")]),s("p",[s("img",{attrs:{src:"https://res.cloudinary.com/dohtkyi84/image/upload/v1481362001/cover/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7_2016-12-10_%E4%B8%8B%E5%8D%885.26.11_mgc7al.png",alt:"functional programming icon"}})]),s("p",[t._v("Functional Programming 是一种编程范式(programming paradigm)，就像 Object-oriented Programming(OOP)一样，就是一种写程式的方法论，这些方法论告诉我们如何思考及解决问题。")]),s("p",[t._v("简单说 Functional Programming 核心思想就是做运算处理，并用 function 来思考问题，例如像以下的算数运算式：")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("6")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n")])]),s("p",[t._v("我们可以写成")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("add")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n"),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("mul")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" b\n"),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("sub")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" b\n\n"),s("span",{attrs:{class:"token function"}},[t._v("sub")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("add")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("6")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("mul")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),s("p",[t._v("我们把每个运算包成一个个不同的 function，并用这些 function 组合出我们要的结果，这就是最简单的 Functional Programming。")]),s("h2",{attrs:{id:"functional-programming-基本要件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#functional-programming-基本要件","aria-hidden":"true"}},[t._v("#")]),t._v(" Functional Programming 基本要件")]),s("p",[t._v("跟 OOP 一样不是所有的语言都支持 FP，要能够支持 FP 的语言至少需要符合"),s("strong",[t._v("函数为一等公民")]),t._v("的特性。")]),s("h3",{attrs:{id:"函数为一等公民-first-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数为一等公民-first-class","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数为一等公民 (First Class)")]),s("p",[t._v("一等公民就是指跟其他资料型别具有同等地位，也就是说函数能够被赋值给变数，函数也能够被当作参数传入另一个函数，也可当作一个函数的回传值")]),s("p",[s("strong",[t._v("函数能够被赋值给变数")])]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("hello")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),s("p",[s("strong",[t._v("函数能被当作参数传入")])]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token function"}},[t._v("fetch")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'www.google.com'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("then")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 匿名 function 被传入 then()")]),t._v("\n\n")])]),s("p",[s("strong",[t._v("函数能被当作回传值")])]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("a")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t  "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t"),s("span",{attrs:{class:"token comment"}},[t._v("// 可以回传一个 function")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),s("h2",{attrs:{id:"functional-programming-重要特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#functional-programming-重要特性","aria-hidden":"true"}},[t._v("#")]),t._v(" Functional Programming 重要特性")]),s("h3",{attrs:{id:"expression-no-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expression-no-statement","aria-hidden":"true"}},[t._v("#")]),t._v(" Expression, no Statement")]),s("p",[t._v("Functional Programming 都是 表达式 (Expression) 不会是 陈述式(Statement)。\n基本区分表达式与陈述式：")]),s("p",[s("strong",[t._v("表达式")]),t._v(" 是一个运算过程，一定会有返回值，例如执行一个 function")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token function"}},[t._v("add")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),s("ul",[s("li",[t._v("陈述式 则是表现某个行为，例如一个 赋值给一个变数")])]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),s("blockquote",[s("p",[t._v("有时候表达式也可能同时是合法的陈述式，这里只讲基本的判断方法。如果想更深入了解其中的差异，可以看这篇文章 "),s("a",{attrs:{href:"http://www.2ality.com/2012/09/expressions-vs-statements.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Expressions versus statements in JavaScript")])])]),s("p",[t._v("由于 Functional Programming 最早就是为了做运算处理不管 I/O，而 Statement 通常都属于对系统 I/O 的操作，所以 FP 很自然的不会是 Statement。")]),s("blockquote",[s("p",[t._v("当然在实际中不可能完全没有 I/O 的操作，Functional Programming 只要求对 I/O 操作限制到最小，不要有不必要的 I/O 行为，尽量保持运算过程的单纯。")])]),s("h3",{attrs:{id:"pure-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pure-function","aria-hidden":"true"}},[t._v("#")]),t._v(" Pure Function")]),s("p",[s("strong",[t._v("Pure function 是指 一个 function 给予相同的参数，永远会回传相同的返回值，并且没有任何显著的副作用(Side Effect)")])]),s("p",[t._v("举个例子：")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\narr"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("slice")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// [1, 2, 3]")]),t._v("\n\narr"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("slice")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// [1, 2, 3]")]),t._v("\n\narr"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("slice")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// [1, 2, 3]")]),t._v("\n\n")])]),s("p",[t._v("这里可以看到 slice 不管执行几次，返回值都是相同的，并且除了返回一个值(value)之外并没有做任何事，所以 "),s("code",[t._v("slice")]),t._v(" 就是一个 pure function。")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\narr"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("splice")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// [1, 2, 3]")]),t._v("\n\narr"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("splice")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// [4, 5]")]),t._v("\n\narr"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("slice")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n\n")])]),s("p",[t._v("这里我们换成用 "),s("code",[t._v("splice")]),t._v("，因为 "),s("code",[t._v("splice")]),t._v(" 每执行一次就会影响 "),s("code",[t._v("arr")]),t._v(" 的值，导致每次结果都不同，这就很明显不是一个 pure function。")]),s("p",[s("strong",[t._v("Side Effect")])]),s("p",[t._v("Side Effect 是指一个 function 做了跟本身运算返回值没有关系的事，比如说修改某个全域变数，或是修改传入参数的值，甚至是执行 "),s("code",[t._v("console.log")]),t._v(" 都算是 Side Effect。")]),s("p",[t._v("Functional Programming 强调没有 Side Effect，也就是 function 要保持纯粹，只做运算并返回一个值，没有其他额外的行为。")]),s("p",[t._v("这里列举几个前端常见的 Side Effect，但不是全部")]),s("ul",[s("li",[t._v("发送 http request")]),s("li",[t._v("在画面印出值或是 log")]),s("li",[t._v("获得使用者 input")]),s("li",[t._v("Query DOM 事件")])]),s("p",[s("strong",[t._v("Referential transparency")])]),s("p",[t._v("前面提到的 pure function 不管外部环境如何，只要参数相同，函数执行的返回结果必定相同。这种不依赖任何外部状态，只依赖于传入的参数的特性也称为 引用透明(Referential transparency)")]),s("h3",{attrs:{id:"利用参数保存状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用参数保存状态","aria-hidden":"true"}},[t._v("#")]),t._v(" 利用参数保存状态")]),s("p",[t._v("由于最近很红的 Redux 使我能很好的举例，让大家了解什么是用参数保存状态。了解 Redux 的开发者应该会知 Redux 的状态是由各个 reducer 所组成的，而每个 reducer 的状态就是保存在参数中！")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("countReducer")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),s("p",[t._v("如果你跟 Redux 不熟可以看下面递回的例子")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("findIndex")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" predicate"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" start "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" start "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("predicate")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" start"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("findIndex")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" predicate"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),s("span",{attrs:{class:"token operator"}},[t._v("+")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("findIndex")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v("'a'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'b'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),s("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'b'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 找数组中 'b' 的 index")]),t._v("\n\n")])]),s("p",[t._v("这里我们写了一个 findIndex 用来找数组中的元素位置，我们在 "),s("code",[t._v("findIndex")]),t._v(" 中故意多塞了一个参数用来保存当前找到第几个 index 的"),s("strong",[t._v("状态")]),t._v("，这就是利用参数保存状态！")]),s("blockquote",[s("p",[t._v("这边用到了递回，递回会不断的呼叫自己，制造多层 stack frame，会导致运算速度较慢，而这通常需要靠编译器做优化！")])]),s("blockquote",[s("p",[t._v("那 JS 有没有做递回优化呢？ 恭喜大家，ES6 提供了 "),s("a",{attrs:{href:"http://www.2ality.com/2015/06/tail-call-optimization.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("尾呼优化(tail call optimization)")]),t._v("，让我们有一些手法可以让递回更有效率！")])]),s("h2",{attrs:{id:"functional-programming-优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#functional-programming-优势","aria-hidden":"true"}},[t._v("#")]),t._v(" Functional Programming 优势")]),s("h3",{attrs:{id:"可读性高"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可读性高","aria-hidden":"true"}},[t._v("#")]),t._v(" 可读性高")]),s("p",[t._v("当我们透过一系列的函数封装资料的操作过程，代码能变得非常的简洁且可读性极高，例如下面的例子")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("9")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("concat")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("8")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("7")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 合并数组")]),t._v("\n      "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("sort")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{attrs:{class:"token comment"}},[t._v("// 排序")]),t._v("\n      "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("filter")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 过滤出大于 5 的")]),t._v("\n\n")])]),s("h3",{attrs:{id:"可维护性高"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可维护性高","aria-hidden":"true"}},[t._v("#")]),t._v(" 可维护性高")]),s("p",[t._v("因为 Pure function 等特性，执行结果不依赖外部状态，且不会对外部环境有任何操作，使 Functional Programming 能更好的除错及撰写单元测试。")]),s("h3",{attrs:{id:"易于并行-平行处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#易于并行-平行处理","aria-hidden":"true"}},[t._v("#")]),t._v(" 易于并行/平行处理")]),s("p",[t._v("Functional Programming 易于做并行/平行(Concurrency/Parallel)处理，因为我们基本上只做运算不碰 I/O，再加上没有 Side Effect 的特性，所以较不用担心 deadlock 等问题。")]),s("h2",{attrs:{id:"今日小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#今日小结","aria-hidden":"true"}},[t._v("#")]),t._v(" 今日小结")]),s("p",[t._v("今天讲了 Functional Programming 的基本特性，及其优势。现在愈来愈多的 Library 用到了 FP 的观念，JS 也越来越多 Functional 的函数库，例如：Lodash, Underscore, lazy, Ramda。了解 FP 的基本观念有助于我们在学习其他 Library 更容易上手，也能使我们撰写出更好的代码，希望各位读者有所收获，若有任何疑问欢迎在下方留言给我！")])])}],!1,null,null,null);a.default=r.exports}}]);